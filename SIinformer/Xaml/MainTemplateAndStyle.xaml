<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Window="clr-namespace:SIinformer.Window">
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Theme.xaml" />
    </ResourceDictionary.MergedDictionaries>

        <Style x:Key="notBugCheckBoxStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="Background" Value="{StaticResource NormalBrush}" />
            <Setter Property="Foreground" Value="{StaticResource TextBrush}" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Top" />
            <Setter Property="Padding" Value="4,0,0,0" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="16" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Rectangle Height="14" Margin="1" x:Name="Background" Width="14" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                                <Rectangle Height="14" Margin="1" x:Name="BackgroundOverlay" Width="14" Opacity="0" Fill="{x:Null}" Stroke="{StaticResource HoverBrush}" StrokeThickness="2" />
                                <Rectangle Height="16" x:Name="PressedRectangle" Width="16" IsHitTestVisible="false" Opacity="0" Stroke="{StaticResource HoverBrush}" StrokeThickness="1" />
                                <Path Height="10" Margin="1,1,0,1.5" x:Name="CheckIcon" Width="10.5" Opacity="0" Fill="{StaticResource GlyphBrush}" Stretch="Fill" Data="M102.03442,598.79645 L105.22962,597.78918 L106.78825,600.42358 C106.78825,600.42358 108.51028,595.74304 110.21724,593.60419 C112.00967,591.35822 114.89314,591.42316 114.89314,591.42316 C114.89314,591.42316 112.67844,593.42645 111.93174,594.44464 C110.7449,596.06293 107.15683,604.13837 107.15683,604.13837 z" />
                                <Rectangle Height="4" x:Name="IndeterminateIcon" Width="4" Opacity="0" Fill="{StaticResource GlyphBrush}" />
                                <Rectangle Height="14" x:Name="DisabledVisualElement" Width="14" Opacity="0" Fill="{StaticResource DisabledBackgroundBrush}" />
                                <Rectangle Height="16" x:Name="ContentFocusVisualElement" Width="16" IsHitTestVisible="false" Opacity="0" Stroke="{StaticResource HoverShineBrush}" StrokeThickness="1" />
                                <Rectangle Height="12" x:Name="ShineRectangle" Width="14" IsHitTestVisible="false" Opacity="1" Stroke="{x:Null}" StrokeThickness="1" Fill="{StaticResource ShineBrush}" Margin="2,2,2,2" />
                            </Grid>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" x:Name="contentPresenter" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Column="1" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="CheckIcon" Property="Opacity" Value="1"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter TargetName="CheckIcon" Property="Opacity" Value="0.45"/>
                                <!--<Setter TargetName="IndeterminateIcon" Property="Opacity" Value="1"/>-->
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="BackgroundOverlay" Property="Opacity" Value="1" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="PressedRectangle" Property="Opacity" Value="1" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="DisabledVisualElement" Property="Opacity" Value="1" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    <SolidColorBrush x:Key="IsNewCategoryColor">PaleGoldenrod</SolidColorBrush>
    
    <DataTemplate x:Key="ListItemsTemplate_Author">
        <Grid x:Name="content" ShowGridLines="False" Background="Transparent" HorizontalAlignment="Stretch">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <StackPanel Grid.Column="0">
                <TextBlock x:Name="NameTextBlock" Text="{Binding Path=Name}" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Left" TextTrimming="CharacterEllipsis"/>
                <StackPanel x:Name="CategoryBlock" Orientation="Horizontal" Visibility="Collapsed">                        
                    <TextBlock Text="Категория:" FontSize="10" TextTrimming="CharacterEllipsis"/>
                    <TextBlock Text="{Binding Path=Category}" FontSize="10" Margin="3,0,0,0" TextTrimming="CharacterEllipsis"/>
                </StackPanel>
                <DockPanel>
                    <TextBlock x:Name="UpdateDateVisualTextBlock" Text="{Binding Path=UpdateDateVisual}" FontSize="10"  DockPanel.Dock="Left" TextTrimming="CharacterEllipsis"/>
                    <TextBlock x:Name="UpdateStateTextBlock" Text="Проверяется" Margin="10,0,0,0" FontSize="10"  DockPanel.Dock="Right" Opacity="0" HorizontalAlignment="Right" TextTrimming="CharacterEllipsis"/>
                </DockPanel>
            </StackPanel>                
            <Button Grid.Column="1" Grid.RowSpan="2" x:Name="ReadButton" ToolTip="Пометить как прочитанное" Command="{x:Static Window:MainCommands.IsReadAuthorCommand}"
                        Style="{DynamicResource CirculeButtonStyle}" HorizontalAlignment="Center" VerticalAlignment="Center" Cursor="Hand" 
                        IsEnabled="{Binding Path=IsNew}"  
                        >
                <Image Source="{Binding Path=Star}" HorizontalAlignment="Center" VerticalAlignment="Center" Width ="16" Height="16" Margin="3,3,3,3"/>
            </Button>
            
            <Grid Grid.Row="1" x:Name="stackPanelForButton" Visibility="Collapsed">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <WrapPanel Grid.Row="0" Grid.ColumnSpan="2" Orientation="Horizontal">
                    <Button x:Name="InfoButton"  Content="i" ToolTip="Открыть информацию о произведениях" Command="{x:Static Window:MainCommands.OpenAuthorWindowCommand}"
                            Width="20" Height="20" FontFamily="Monotype Corsiva" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" 
                            Margin="0,3,0,0" Padding="0,0,3,1" Background="{x:Null}" Cursor="Hand" FontSize="14" />
                    <Button x:Name="WebButton" Content="w" ToolTip="Открыть страничку автора" Command="{x:Static Window:MainCommands.OpenAuthorPageCommand}" 
                            Width="20" Height="20" FontFamily="Monotype Corsiva" VerticalContentAlignment="Center" HorizontalContentAlignment="Center"
                            Margin="0,3,0,0" Padding="0,0,3,1" Background="{x:Null}" Cursor="Hand" FontSize="14" />
                    <Button x:Name="CopyButton" Content="c" ToolTip="Скопировать в буфер обмена" Command="{x:Static Window:MainCommands.CopyAuthorCommand}" 
                            Width="20" Height="20" FontFamily="Monotype Corsiva" VerticalContentAlignment="Center" HorizontalContentAlignment="Center"
                            Margin="10,3,0,0" Padding="0,0,3,1" Background="{x:Null}" Cursor="Hand" FontSize="14" />
                    <Button x:Name="RenameAuthorButton" Content="r" ToolTip="Переименовать автора" Command="{x:Static Window:MainCommands.RenameAuthorOrCategoryCommand}" 
                            Width="20" Height="20"  FontFamily="Monotype Corsiva" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" 
                            Margin="0,3,0,0" Padding="0,0,3,1" Background="{x:Null}" Cursor="Hand" FontSize="14" />
                    <Button x:Name="ChangeCategoryButton" Content="Cat" ToolTip="Переместить в категорию" Command="{x:Static Window:MainCommands.ChangeCategoryAuthorCommand}" 
                            Width="30" Height="20" FontFamily="Monotype Corsiva" VerticalContentAlignment="Center" HorizontalContentAlignment="Center"
                            Margin="10,3,0,0" Padding="0,0,3,1" Background="{x:Null}" Cursor="Hand" FontSize="14"/>
                    <Button x:Name="UpdateButton" Content="u" ToolTip="Обновить автора" Command="{x:Static Window:MainCommands.UpdateAuthorCommand}" 
                            Width="20" Height="20" FontFamily="Monotype Corsiva" VerticalContentAlignment="Center" HorizontalContentAlignment="Center"
                            Margin="10,3,0,0" Padding="0,0,3,1" Background="{x:Null}" Cursor="Hand" FontSize="14"/>
                    <Button x:Name="DeleteAuthorButton" Content="x" ToolTip="Удалить автора" Command="{x:Static Window:MainCommands.DeleteAuthorOrCategoryCommand}" 
                            Width="20" Height="20" FontFamily="Monotype Corsiva" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" 
                            Margin="10,3,0,0" Padding="0,0,3,1" Background="{x:Null}" Cursor="Hand" FontSize="14" />
                    <CheckBox Content="не проверять" IsChecked="{Binding Path=IsIgnored, Mode=TwoWay}" ToolTip="Не проверять обновления автора"
                                  VerticalAlignment="Center" Margin="10,3,0,0" IsThreeState="False" Cursor="Hand" FontSize="11" Style="{StaticResource notBugCheckBoxStyle}"/>
                    <CheckBox Content="кешировать" IsChecked="{Binding Path=Cached, Mode=TwoWay}" ToolTip="Кешировать книги автора"
                                  VerticalAlignment="Center" Margin="10,3,0,0" IsThreeState="True" Cursor="Hand" FontSize="11" Style="{StaticResource notBugCheckBoxStyle}"/>
                </WrapPanel>
                <!--<DockPanel Grid.Row="1" VerticalAlignment="Top">
                        <TextBlock Margin="0,3,0,0" DockPanel.Dock="Left" VerticalAlignment="Center">Категория:</TextBlock>
                        <TextBox Margin="5,3,0,0" Text="{Binding Path=Category,Mode=TwoWay}"></TextBox>
                    </DockPanel>-->
            </Grid>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}, Path=DataContext.IsUpdated}" Value="true">
                <Setter TargetName="UpdateButton" Property="IsEnabled" Value="false"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}, Path=DataContext.IsIgnored}" Value="true">
                <Setter TargetName="NameTextBlock" Property="Opacity" Value="0.6"/>
                <Setter TargetName="CategoryBlock" Property="Opacity" Value="0.6"/>
                <Setter TargetName="UpdateDateVisualTextBlock" Property="Opacity" Value="0.6"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}, 
                            Path=DataContext.IsUpdated}" Value="true">
                <Setter TargetName="UpdateStateTextBlock" Property="Opacity" Value="1"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, Mode=FindAncestor}, 
                            Path=DataContext.UseCategory}" Value="False">
                <Setter TargetName="CategoryBlock" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <!--Свойство DataContext у ListBoxItem ссылается на конкретный элемент списка, поэтому простой Binding не подходит. 
                            Вместо этого, мы биндимся на DataContext самого ListBox, ну или Windows/UserControl. Он как раз и хранит твой Settings-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, Mode=FindAncestor}, 
                            Path=DataContext.ExtendedMode}" Value="true" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}, 
                            Path=IsSelected}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="stackPanelForButton" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="ListItemsTemplate_Category">
        <Grid HorizontalAlignment="Stretch">
            <Border BorderBrush="{StaticResource NormalBorderBrush}" Background="{StaticResource NormalBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"/>
            <StackPanel Orientation="Horizontal">
                <Button x:Name="CategoryCollapsed" ToolTip="Свернуть" Margin="4,0,0,0" Height="18" Width="18" HorizontalAlignment="Left" VerticalAlignment="Center" 
                    Command="{x:Static Window:MainCommands.CategoryCollapsedCommand}">
                    <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" StrokeThickness="2" 
                                          Data="M 6, 1 L 6,6 L 1,6 Z" Stroke="{DynamicResource TextBrush}" Fill="{DynamicResource TextBrush}"/>
                </Button>
                <TextBlock x:Name="NameTextBlock" Text="{Binding Path=VisualName}" Margin="3,3,0,3" FontSize="16"
                           VerticalAlignment="Center" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" FlowDirection="RightToLeft">
                <Button x:Name="CategoryDown" ToolTip="Категорию вниз" Margin="4,0,4,0" Height="18" Width="18" HorizontalAlignment="Right" VerticalAlignment="Center" Visibility="Collapsed"
                    Command="{x:Static Window:MainCommands.CategoryDownCommand}">
                    <Path HorizontalAlignment="Center" VerticalAlignment="Center" StrokeThickness="2" 
                                          Data="M 1,3 L 4.5,6.5 L 8,3" Stroke="{DynamicResource TextBrush}" Fill="{DynamicResource TextBrush}"/>
                </Button>
                <Button x:Name="CategoryUp" ToolTip="Категорию вверх" Margin="0,0,4,0" Height="18" Width="18" HorizontalAlignment="Right" VerticalAlignment="Center" Visibility="Collapsed"
                    Command="{x:Static Window:MainCommands.CategoryUpCommand}">
                    <Path HorizontalAlignment="Center" VerticalAlignment="Center" StrokeThickness="2" 
                                          Data="M 1,4.5 L 4.5,1 L 8,4.5" Stroke="{DynamicResource TextBrush}" Fill="{DynamicResource TextBrush}"/>
                </Button>
                <Button x:Name="RenameCategoryButton" Content="r" ToolTip="Переименовать категорию" Command="{x:Static Window:MainCommands.RenameAuthorOrCategoryCommand}" 
                            Width="18" Height="18" FontFamily="Monotype Corsiva" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" 
                            Margin="10,0,0,0" Padding="3,0,0,1" Background="{x:Null}" Cursor="Hand" FontSize="14" Visibility="Collapsed"/>
                <Button x:Name="DeleteCategoryButton" Content="x" ToolTip="Удалить категорию" Command="{x:Static Window:MainCommands.DeleteAuthorOrCategoryCommand}" 
                            Width="18" Height="18" FontFamily="Monotype Corsiva" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" 
                            Margin="5,0,0,0" Padding="3,0,0,1" Background="{x:Null}" Cursor="Hand" FontSize="14" Visibility="Collapsed"/>
            </StackPanel>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsNew}" Value="True">
                <Setter TargetName="NameTextBlock" Property="Foreground" Value="{DynamicResource IsNewCategoryColor}" />
                <Setter TargetName="NameTextBlock" Property="Opacity" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Collapsed}" Value="True">
                <Setter TargetName="arrow" Property="Data" Value="M 1, 1 L 1, 7 L 5, 4 Z" />
                <Setter TargetName="CategoryCollapsed" Property="ToolTip" Value="Развернуть" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}, 
                            Path=IsSelected}" Value="True">
                <Setter TargetName="CategoryUp" Property="Visibility" Value="Visible" />
                <Setter TargetName="CategoryDown" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <!--Свойство DataContext у ListBoxItem ссылается на конкретный элемент списка, поэтому простой Binding не подходит. 
                            Вместо этого, мы биндимся на DataContext самого ListBox, ну или Windows/UserControl. Он как раз и хранит твой Settings-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, Mode=FindAncestor}, 
                            Path=DataContext.ExtendedMode}" Value="true" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}, 
                            Path=IsSelected}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="RenameCategoryButton" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <!--Свойство DataContext у ListBoxItem ссылается на конкретный элемент списка, поэтому простой Binding не подходит. 
                            Вместо этого, мы биндимся на DataContext самого ListBox, ну или Windows/UserControl. Он как раз и хранит твой Settings-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, Mode=FindAncestor}, 
                            Path=DataContext.ExtendedMode}" Value="true" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}, 
                            Path=IsSelected}" Value="true" />
                    <Condition Binding="{Binding Path=IsEmpty}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="DeleteCategoryButton" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=IsFirst}" Value="True">
                <Setter TargetName="CategoryUp" Property="IsEnabled" Value="False" />
                <Setter TargetName="CategoryUp" Property="Opacity" Value="0.5" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsLast}" Value="True">
                <Setter TargetName="CategoryDown" Property="IsEnabled" Value="False" />
                <Setter TargetName="CategoryDown" Property="Opacity" Value="0.5" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="7"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="2"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="2"/>
                            </Grid.RowDefinitions>
                            <ContentPresenter Name="Icon" Grid.Column="1" Grid.Row="1" VerticalAlignment="Center" ContentSource="Icon"/>
                            <TextBlock Text="{TemplateBinding Header}" Grid.Column="2" Grid.Row="1"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True" >
                            <Setter Property="Background" Value="{StaticResource SelectedBackgroundBrush}" TargetName="Border" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True" >
                            <Setter Property="Background" Value="{StaticResource PressedBrush}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Name="Border" Background="{StaticResource ControlBackgroundBrush}" BorderBrush="{StaticResource PressedBorderBrush}" 
                            BorderThickness="1" CornerRadius="3">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3"/>
                            <Setter TargetName="Border" Property="CornerRadius" Value="4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>